import java.util.Random;
import com.github.phf.jb.Bench;
import com.github.phf.jb.Bee;
public class BinarySearchTreeBench {
    private static final int SIZE = 100;
    private static final Random RAND = new Random();
    private BinarySearchTreeBench() {}
    private static void insertLinear(Map<Integer, Integer> m) {
        for (int i = 0; i < SIZE; i++) {
            m.insert(i, 1);
        }
    }
    private static void insertRandom(Map<Integer, Integer> m) {
        for (int i = 0; i < SIZE; i++) {
            m.insert(RAND.nextInt(SIZE * 4), 1);
        }
    }
    private static void removeLinear(Map<Integer, Integer> m) {
        for (int i = 0; i < SIZE; i++) {
            if (m.has(i)) {
                m.remove(i);
            }
        }
    }
    private static void removeRandom(Map<Integer, Integer> m) {
        int temp;
        for (int i = 0; i < SIZE; i++) {
            temp = RAND.nextInt(SIZE * 4);
            if (m.has(temp)) {
               m.remove(temp); 
            }
        }
    }
    @Bench
    
}
