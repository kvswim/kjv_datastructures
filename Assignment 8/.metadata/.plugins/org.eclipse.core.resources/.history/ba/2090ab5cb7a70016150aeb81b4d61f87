import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;



/**TreapMap.java.
 * Kyle Verdeyen
 * kverdey1@jhu.edu
 * @author root
 *
 * @param <K> keys.
 * @param <V> values.
 */
public class TreapMap<K extends Comparable<? super K>, V>
    implements OrderedMap<K, V> {
    private class Node {
        Random oRAND = new Random();
        Node left;
        Node right;
        K key;
        V value;
        int priority;

        Node() {
        }

        Node(K k, V v) {
            this.key = k;
            this.value = v;
            priority = oRAND.nextInt();
        }

        public String toString() {
            return "Node<key: " + this.key
                + "; value: " + this.value
                + ">";
        }
    }

    private Node root;
    private StringBuilder stringBuilder;

    /**Just a constructor.
     *
     */
    public TreapMap() {
        root = null;
    }

    @Override
    public void insert(K k, V v) throws IllegalArgumentException {
        if (k == null) {
            throw new IllegalArgumentException("cannot handle null key");
        }
        this.root = this.insert(this.root, k, v);
    }

    private Node insert(Node n, K k, V v) {
        if (n == null) {
            return new Node(k, v);
        } else if (k.compareTo(n.key) < 0) {
            n.left = insert(n.left, k, v);
            if (n.left.priority < n.priority) {
                n = rotateLeftChild(n);
            }
        } else if (k.compareTo(n.key) > 0) {
            n.right = insert(n.right, k, v);
            if (n.right.priority < n.priority) {
                n = rotateRightChild(n);
            }
        }
        return n;
    }

    private Node rotateLeftChild(Node n) {
        Node temp = n.left;
        n.left = temp.right;
        temp.right = n;
        return temp;
    }

    private Node rotateRightChild(Node n) {
        Node temp = n.right;
        n.right = temp.left;
        temp.left = n;
        return temp;
    }

    @Override
    public V remove(K k) throws IllegalArgumentException {
        Node n = this.find(k);
        this.root = this.remove(this.root, k);
        return n.value;
    }

    private Node find(K k) {
        Node temp1 = this.root;
        Node temp2 = new Node();
        temp2.key = k;
        for (;;) {
            try {if(k.compareTo(temp1.key) < 0) {
                temp1 = temp1.left;
            }
            else if (k.compareTo(temp1.key) > 0) {
                temp1 = temp1.right;
            }
            else if (temp1 != null) {
                return temp1;
            }}
            catch (NullPointerException e) {return null;}
        }
    }
    private Node remove(Node n, K k) {
        if (n != null) {
            try {if (k.compareTo(n.key) < 0) {
                n.left = remove(n.left, k);
            }
            else if (k.compareTo(n.key) > 0) {
                n.right = remove(n.right, k);
            } else {
                if (n.left == null) {
                    return n.right;
                }
                else if (n.right == null) {
                    return n.left;
                } else {
                    n.key = min(n.right);
                    n.right = remove(n.right, n.key);
                }
            }
            }
            catch (NullPointerException e) {}
        }
        return n;
    }
    private K min(Node n) {
        Node temp = n;
        while (temp.left != null) {
            temp = temp.left;
        }
        return temp.key;
    }
    @Override
    public void put(K k, V v) throws IllegalArgumentException {
        Node n = this.find(k);
        n.value = v;        
    }

    @Override
    public V get(K k) throws IllegalArgumentException {
        Node n = find(k);
        if (n != null){
            return n.value;
        }
        else throw new IllegalArgumentException("cannot find key " + k);
    }

    @Override
    public boolean has(K k) {
        if (k == null) {
            return false;
        }
        return this.find(k) != null;
    }

    @Override
    public int size() {
        return countNodes(this.root);
    }

    private int countNodes(Node n) {
        if (n == null){ 
            return 0;
        }
        else {
            int i = 1;
            i += countNodes(n.left);
            i += countNodes(n.right);
            return i;
        }
    }
    // Recursively add keys from subtree rooted at given node
    // into the given list.
    private void iteratorHelper(Node n, List<K> keys) {
        if (n == null) {
            return;
        }
        this.iteratorHelper(n.left, keys);
        keys.add(n.key);
        this.iteratorHelper(n.right, keys);
    }
    @Override
    public Iterator<K> iterator() {
        List<K> keys = new ArrayList<K>();
        this.iteratorHelper(this.root, keys);
        return keys.iterator();
    }

    // If we don't have a StringBuilder yet, make one;
    // otherwise just reset it back to a clean slate.
    private void setupStringBuilder() {
        if (this.stringBuilder == null) {
            this.stringBuilder = new StringBuilder();
        } else {
            this.stringBuilder.setLength(0);
        }
    }

    // Recursively append string representations of keys and
    // values from subtree rooted at given node.
    private void toStringHelper(Node n, StringBuilder s) {
        if (n == null) {
            return;
        }
        this.toStringHelper(n.left, s);
        s.append(n.key);
        s.append(": ");
        s.append(n.value);
        s.append(", ");
        this.toStringHelper(n.right, s);
    }

    @Override
    public String toString() {
        this.setupStringBuilder();
        this.stringBuilder.append("{");

        this.toStringHelper(this.root, this.stringBuilder);

        int length = this.stringBuilder.length();
        if (length > 1) {
            // If anything was appended at all, get rid of
            // the last ", " the toStringHelper put in.
            this.stringBuilder.setLength(length - 2);
        }
        this.stringBuilder.append("}");

        return this.stringBuilder.toString();
    }
}
