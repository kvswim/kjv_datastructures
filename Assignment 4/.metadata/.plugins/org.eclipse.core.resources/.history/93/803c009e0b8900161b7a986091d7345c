public class ArrayDequeue<T> implements Dequeue<T> {

    private transient T[] deque;
    private int front;
    private int back;

    public ArrayDequeue() {
        // TODO Auto-generated constructor stub
        deque = (T[]) new Object[1];
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        ArrayDequeue a = new ArrayDequeue();
        a.insertFront("Fuck!");
        System.out.println(a.front());
    }

    @Override
    public boolean empty() {
        // TODO Auto-generated method stub
        return front == back;
    }

    @Override
    public int length() {
        return deque.length;
    }

    @Override
    public T front() throws EmptyException {
        return deque[front];
    }

    @Override
    public T back() throws EmptyException {
        return deque[back];
    }

    @Override
    public void insertFront(T t) {
        if(t == null) {
            throw new NullPointerException();
        }
        deque[front = (front - 1) & (deque.length - 1)] = t;
        if(front == back) {
            resize();
        }
    }

    @Override
    public void insertBack(T t) {
        if(t == null) {
            throw new NullPointerException();
        }
        deque[back] = t; 
        if((back = (back + 1) & deque.length - 1) == back) {
            resize();
        }
    }

    @Override
    public void removeFront() throws EmptyException {
        int a = front; 
        /*if(deque[a] == null) {
            throw new EmptyException();
        }*/
        deque[a] = null;
        front = (a + 1) & (deque.length - 1);
    }

    @Override
    public void removeBack() throws EmptyException {
        int a = (back - 1) & (deque.length - 1);
        deque[a] = null;
        back = a;
    }

    public void resize() {
        assert front == back;
        int a = front; 
        int b = deque.length; 
        int c = b - a;
        int newcap = b << 1;
        Object[] newone = new Object[newcap];
        System.arraycopy(deque, a, newone, 0, c);
        System.arraycopy(deque, 0, newone, c, a);
        deque = (T[]) newone;
        front = 0;
        back = b;
    }

    public String toString() {
        return null;
    }

}
