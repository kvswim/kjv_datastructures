import java.util.Iterator;

public class SentinelList<T> implements List<T> {
    private int length;
    private Node<T> guardFirst = new Node<T>();
    private Node<T> guardLast = new Node<T>();
    private static final class Node<T> implements Position<T> {
        Node<T> next;
        Node<T> prev;
        T data;
        List<T> owner;
        @Override
        public T get() {
            return this.data;
        }
        @Override
        public void put(T t) {
            this.data = t;
        }
    }
    private final class ListIterator implements Iterator<T> {
        Node<T> current;
        boolean forward;

        ListIterator(boolean f) {
            this.forward = f;
            if (this.forward) {
                this.current = SentinelList.this.guardFirst.next;
            } else {
                this.current = SentinelList.this.guardLast.prev;
        }
        }
        @Override
        public T next() {
            T t = this.current.get();
            if (this.forward) {
                this.current = this.current.next;
            } else {
                this.current = this.current.prev;
            }
            return t;
        }

        @Override
        public boolean hasNext() {
            return this.current != null;
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    /**
     * Create an empty list.
     */
    public SentinelList() {
        guardFirst.prev = null;
        guardFirst.owner = this;
        guardFirst.next = guardLast;
        guardLast.prev = guardFirst;
        guardLast.next = null;
        guardLast.owner = this;
    }

    private Node<T> convert(Position<T> p) throws PositionException {
        try {
            Node<T> n = (Node<T>) p;
            if (n.owner != this) {
                throw new PositionException();
            }
            return n;
        } catch (NullPointerException | ClassCastException e) {
            throw new PositionException();
        }
    }

    @Override
    public boolean empty() {
        return this.length == 0;
    }

    @Override
    public int length() {
        return this.length;
    }

    //is the node passed the first in the list?
    @Override
    public boolean first(Position<T> p) {
        return guardFirst.next == p;
    }

    //is the node past the last in the list?
    @Override
    public boolean last(Position<T> p) {
        return guardLast.prev == p;
    }

    @Override
    public Position<T> front() throws EmptyException {
        if (this.empty()) {
            throw new EmptyException();
        }
        return guardFirst.next;
    }

    @Override
    public Position<T> back() throws EmptyException {
        if(this.empty()) {
            throw new EmptyException();
        }
        return guardLast.prev;
    }

    @Override
    public Position<T> insertFront(T t) {
        Node<T> n = new Node<T>();
        n.data = t;
        n.owner = this;
        n.next = SentinelList.this.guardFirst.next;
        SentinelList.this.guardFirst.next.prev = n;
        n.prev = SentinelList.this.guardFirst;
        guardFirst.next = n;
        this.length += 1;
        return n;
    }

    @Override
    public Position<T> insertBack(T t) {
        Node<T> n = new Node<T>();
        n.data = t;
        n.owner = this;
        n.next = SentinelList.this.guardLast;
        n.prev = SentinelList.this.guardLast.prev;
        SentinelList.this.guardLast.prev.next = n;
        guardLast.prev = n;
        this.length += 1;
        return n;
    }

    @Override
    public void removeFront() throws EmptyException {
        if (this.empty()) {
            throw new EmptyException();
        }
        guardFirst.next.owner = null;
        guardFirst.next = guardFirst.next.next;
        guardFirst.next.prev = guardFirst;
        this.length -= 1;
    }

    @Override
    public void removeBack() throws EmptyException {
        if (this.empty()) {
            throw new EmptyException();
        }
        guardLast.prev.owner = null;
        guardLast.prev = guardLast.prev.prev;
        guardLast.prev.next = guardLast;
        this.length -= 1;
    }

    @Override
    public Position<T> next(Position<T> p) throws PositionException {
        if (this.last(p)) {
            throw new PositionException();
        }
        return this.convert(p).next;
    }

    @Override
    public Position<T> previous(Position<T> p) throws PositionException {
        if (this.first(p)) {
            throw new PositionException();
        }
        return this.convert(p).prev;
    }

    @Override
    public Position<T> insertBefore(Position<T> p, T t)
            throws PositionException {
        Node<T> current = this.convert(p);
        Node<T> n = new Node<T>();
        n.data = t;
        n.owner = this;
        n.prev = current.prev;
        n.next = current;
        current.prev.next = n;
        current.prev = n;
        this.length += 1;
        return n;
    }

    @Override
    public Position<T> insertAfter(Position<T> p, T t)
            throws PositionException {
        Node<T> current = this.convert(p);
        Node<T> n = new Node<T>();
        n.data = t;
        n.owner = this;
        n.next = current.next;
        n.prev = current;
        current.next.prev = n;
        current.next = n;
        this.length += 1;
        return n;
    }

    @Override
    public void remove(Position<T> p) throws PositionException {
        Node<T> n = this.convert(p);
        n.prev.next = n.next;
        n.next.prev = n.prev;
        this.length -= 1;
    }

    @Override
    public Iterator<T> forward() {
        return new ListIterator(true);
    }

    @Override
    public Iterator<T> backward() {
        return new ListIterator(false);
    }

    @Override
    public Iterator<T> iterator() {
        return this.forward();
    }

    @Override
    public String toString() {
        String s = "[";
        for (Node<T> p = this.guardFirst.next; p != guardLast; p = p.next) {
            s += p.data;
            if (p != guardLast.prev) {
                s += ", ";
            }
        }
        s += "]";
        return s;
    }
}
